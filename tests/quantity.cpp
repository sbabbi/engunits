/**
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#include <engineering_units/quantity.hpp>

#include <engineering_units/angle.hpp>
#include <engineering_units/time.hpp>
#include <engineering_units/si/length.hpp>
#include <engineering_units/si/mass.hpp>
#include <engineering_units/si/force.hpp>
#include <engineering_units/si/energy.hpp>
#include <engineering_units/si/power.hpp>

namespace si = engunits::si;
using namespace si::literals;
using namespace engunits::literals;

void test_addition()
{
    static_assert( 1.0_m + 1.0_m == 2.0_m, " 1m + 1m = 2m " );
    static_assert( 1.0_m - 1.0_m == 0.0_m, " 1m - 1m = 0m " );
    
    static_assert( 1.0_N + 1.0_m * 1.0_kg / (1.0_s * 1.0_s) == 2.0_N, 
                   " 1N + 1m * 1kg / (1s * 1s) = 2N " );

//     static_assert( 1.0_m + 0.0_mm == 0.0_m, " 1m - 1m = 0m " );
    
//     static_assert( !check_add_well_formed( 1.0_m, 1.0_s ),
//                    "Can not add meter and seconds" );
}

void test_mult()\
{
    static_assert( 2.0_m * 2.0_m == 4.0 * si::meter_<2>(), " 2m * 2m = 4m^2 " );
    
    static_assert( 4.0_m * 3.0_N / 2.0_s == 6.0_W, " 4m * 3N / 2s  = 6 W " );
    
}


int main() {}
