
/**
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#include <tuple>
#include <engineering_units/unit/mixed_unit.hpp>
#include <engineering_units/si/length.hpp>
#include <engineering_units/si/time.hpp>
#include <engineering_units/si/mass.hpp>
#include <engineering_units/si/force.hpp>

#include <engineering_units/unit/equality.hpp>
#include <engineering_units/unit/multiply.hpp>


using engunits::mixed_unit;
using engunits::dimensionless;

namespace si = engunits::si;

int main()
{
    // operator==
    static_assert(
        mixed_unit< si::meter, si::second >() == 
        mixed_unit< si::second, si::meter >(),
        " m * s == s * m");
    
    static_assert(
        mixed_unit< si::meter, si::second >() != 
        si::second(),
        " m * s != s");
    
    static_assert(
        mixed_unit< si::meter, si::second >() != 
        mixed_unit< si::meter_<2>, si::second>(),
        " m * s != m^2 * s");
    
    static_assert(
        mixed_unit< si::meter_<2>, si::kilogram_<-1>, si::second >() == 
        mixed_unit< si::kilogram_<-1>, si::meter_<2>, si::second >(),
        " m^2 * kg^-1 * s == kg^-1 * m^2 * s");
    
    static_assert(
        mixed_unit< si::newton, si::second_<2> >() ==
        mixed_unit< si::meter, si::kilogram >(),
        " N * s^2 == m * kg" );

    // Compiler error
    //mixed_unit< si::meters, si::meters_<2> >{};
    
    // operator*
    
    static_assert( si::meter() * si::meter() == si::meter_<2>(),
                   "m * m == m^2 " );
    
    static_assert( si::meter() * si::second() == 
                   mixed_unit< si::meter, si::second >(),
                   "m * s == m * s " );

    static_assert( si::meter() * si::meter_<-1>() == 
                   dimensionless(),
                   "m * s == m * s " );
    
    static_assert( mixed_unit< si::meter, si::second >() * si::meter_<-1>() == 
                   si::second(),
                   "(m * s) * m^-1 == s " );
        
    static_assert( si::meter_<-1>() * mixed_unit< si::meter, si::second >() == 
                   si::second(),
                   "m^-1 * (m * s) == s " );
    
    static_assert( mixed_unit<si::meter, si::second, si::kilogram>() *
                   si::second() ==
                   mixed_unit<si::meter, si::second_<2>, si::kilogram>(),
                   "(m * s * kg) * s == (m * s^2 * kg)" );
}
