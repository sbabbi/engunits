/**
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#include <engineering_units/time.hpp>
#include <engineering_units/si/length.hpp>
#include <engineering_units/si/mass.hpp>
#include <engineering_units/si/force.hpp>

#include <engineering_units/unit/equality.hpp>

ENGUNITS_DEFINE_DERIVED_UNIT( newton_copy, Nc, 
                              engunits::si::meter, 
                              engunits::si::kilogram, 
                              engunits::second_<-2> );


// using namespace can do fancy things with ADL, better test
// that things work the same with using namespace and with operator ::

#ifdef ENGUNITS_WITH_USING_NAMESPACE

using namespace engunits;
using namespace si;

#define TEST_ENGNS
#define TEST_SINS

#else

#define TEST_ENGNS engunits::
#define TEST_SINS  engunits::si::

#endif //ENGUNITS_WITH_USING_NAMESPACE

void test_dimensionless()
{
    static_assert( ! TEST_ENGNS is_unit_v< TEST_ENGNS dimensionless>, 
                   "dimensionless is not an unit" );

    static_assert( TEST_ENGNS dimensionless() == TEST_ENGNS dimensionless(),
                    "dimensionless == dimensionless" );
    
    static_assert( TEST_ENGNS dimensionless() != TEST_SINS meter(),
                    "dimensionless != meter" );

    static_assert( TEST_ENGNS dimensionless() != TEST_SINS meter_<3>(),
                    "dimensionless != meter^3" );
    
    static_assert( TEST_ENGNS dimensionless() != 
                   TEST_ENGNS mixed_unit< TEST_SINS meter, TEST_ENGNS second>(),
                    "dimensionless != <meter, second>" );
}

void test_base()
{
    static_assert( TEST_SINS meter() == TEST_SINS meter(),
                   "meter == meter" );
    
    static_assert( TEST_SINS meter() != TEST_SINS meter_<-1>(),
                   "meter != meter^-1" );
    
    static_assert( TEST_SINS meter() == TEST_SINS meter_<4,4>(),
                   "meter == meter_^(4/4)>" );
    
    static_assert( TEST_SINS meter() != TEST_ENGNS second(),
                   "meter != second" );
    
    static_assert( TEST_SINS meter() != TEST_ENGNS second_<3>(),
                   "meter != second^3" );
    
    static_assert( TEST_SINS newton() == newton_copy(),
                   "newton == newton_copy" );
    
    static_assert( TEST_SINS meter() != newton_copy(),
                   "meter != newton_copy" );
    
    static_assert(
        TEST_SINS meter() * TEST_SINS kilogram() * TEST_ENGNS second_<-2>() ==
        TEST_SINS newton(),
        "meter * kilogram * second^-2 == newton" );
}

void test_mixed()
{
    static_assert(
        TEST_ENGNS mixed_unit< TEST_SINS meter, TEST_ENGNS second >() ==
        TEST_ENGNS mixed_unit< TEST_SINS meter, TEST_ENGNS second >(),
        "<meter, second> == <meter, second>" );
    
    static_assert(
        TEST_ENGNS mixed_unit< TEST_SINS meter, TEST_ENGNS second >() ==
        TEST_ENGNS mixed_unit< TEST_ENGNS second, TEST_SINS meter >(),
        "<meter, second> == <second, meter>" );
    
    static_assert(
        TEST_ENGNS mixed_unit< TEST_SINS meter, TEST_ENGNS second, TEST_SINS kilogram >() ==
        TEST_ENGNS mixed_unit< TEST_SINS kilogram, TEST_ENGNS second, TEST_SINS meter >(),
        "<meter, second, kilogram> == <kilogram, second, meter>" );

    static_assert(
        TEST_ENGNS mixed_unit< TEST_SINS meter, TEST_ENGNS second >() !=
        TEST_ENGNS second(),
        "<meter, second> == second" );
    
    static_assert(
        TEST_ENGNS mixed_unit< TEST_SINS meter, TEST_ENGNS second >() !=
        TEST_ENGNS mixed_unit< TEST_SINS meter_<2>, TEST_ENGNS second >(),
        "<meter, second> != <meter^2, second>" );
    
    static_assert(
        TEST_ENGNS mixed_unit< TEST_SINS meter, TEST_ENGNS second >() !=
        TEST_ENGNS mixed_unit< TEST_SINS meter, TEST_ENGNS second, TEST_SINS kilogram >(),
        "<meter, second> != <meter, second, kilogram>" );
    
    static_assert(
        TEST_ENGNS mixed_unit< TEST_SINS meter, TEST_ENGNS second >() !=
        TEST_ENGNS mixed_unit< TEST_SINS meter, TEST_ENGNS second_<-1> >(),
        "<meter, second> != <meter, second^-1>" );
    
    static_assert(
        TEST_ENGNS mixed_unit< TEST_SINS meter, TEST_ENGNS second, TEST_SINS kilogram >() !=
        TEST_ENGNS mixed_unit< TEST_SINS newton, TEST_ENGNS second, TEST_SINS meter >(),
        "<meter, second, kilogram> != <newton, second, meter>" );
    
    static_assert(
        TEST_SINS newton() ==
        TEST_ENGNS mixed_unit< TEST_SINS kilogram, TEST_ENGNS second_<-2>, TEST_SINS meter >(),
        "newton == <kilogram, second^-2, meter>" );
    
    static_assert(
        TEST_SINS newton() ==
        TEST_ENGNS mixed_unit< TEST_SINS kilogram, TEST_SINS meter, TEST_ENGNS second_<-2> >(),
        "newton == <kilogram, meter, second^-2 >" );
    
    static_assert(
        TEST_ENGNS mixed_unit< TEST_SINS meter, TEST_SINS newton >() ==
        TEST_ENGNS mixed_unit< TEST_SINS kilogram, TEST_ENGNS second_<-2>, TEST_SINS meter_<2> >(),
        "<meter, newton> == <kilogram, second^-2, meter^2>" );

    static_assert(
        TEST_ENGNS mixed_unit< TEST_SINS newton, TEST_ENGNS second_<2>, TEST_SINS kilogram_<-1> >() ==
        TEST_SINS meter(),
        "<newton, second^2, kilogram^-1> == meter" );

}

int main()
{
    test_dimensionless();
    test_base();
    test_mixed();
}
