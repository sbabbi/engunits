/*
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef ENGINEERING_UNITS_DETAIL_FOLD_EXPRESSIONS_HPP
#define ENGINEERING_UNITS_DETAIL_FOLD_EXPRESSIONS_HPP

#include <utility>

namespace engunits
{

namespace detail
{

constexpr bool all_of()
{
    return true;
}

/**
 * @internal
 * @brief True if all the arguments are true.
 * @tparam Ts List of arguments implicitly convertible to bools
 */
template<class ... Ts>
constexpr bool all_of( bool head, Ts && ... tail )
{
    return head && all_of( std::forward<Ts>( tail ) ... );
}

constexpr bool any_of()
{
    return false;
}

/**
 * @internal
 * @brief True if any of the arguments is true.
 * @tparam Ts List of arguments implicitly convertible to bool
 */
template<class ... Ts>
constexpr bool any_of( bool head, Ts && ... tail )
{
    return head || any_of( std::forward<Ts>( tail ) ... );
}

constexpr bool none_of()
{
    return true;
}

/**
 * @internal
 * @brief True if none of the arguments is true.
 * @tparam Ts List of arguments implicitly convertible to bool
 */
template<class ... Ts>
constexpr bool none_of( bool head, Ts && ... tail )
{
    return !head && none_of( std::forward<Ts>( tail ) ... );
}

/**
 * @internal
 * @brief Concatenate the elements using operator+ and a separator
 */
template<class T, class Head, class ... Ts>
constexpr auto concatenate( T const & sep, Head && head, Ts && ... ts )
{
    return std::forward<Head>( head ) + sep +
           concatenate( std::forward<Ts>( ts ) ... );
}

template<class T, class Head, class Last>
constexpr auto concatenate( T const & sep, Head && head, Last && last )
{
    return std::forward<Head>( head ) + sep +
           std::forward<Last>( last );
}

template<class T, class Head, class Last>
constexpr auto concatenate( T const &, Head && head )
{
    return std::forward<Head>( head );
}

/**
 * @internal
 * @brief Multiplies all the elements together
 */
template<class Head, class Next>
constexpr auto multiply( Head && head, Next && next )
{
    return std::forward<Head>( head ) * std::forward<Next>( next );
}

template<class Head>
constexpr auto multiply( Head && head )
{
    return std::forward<Head>( head );
}

template<class Head, class Next, class ... Tail>
constexpr auto multiply( Head && head, Next && next, Tail && ... tail )
{
    return multiply( std::forward<Head>( head ) * std::forward<Next>( next ),
                     multiply( std::forward<Tail>( tail ) ... ) );
}


}
}

#endif //ENGINEERING_UNITS_DETAIL_FOLD_EXPRESSIONS_HPP
