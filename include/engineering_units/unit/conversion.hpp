/*
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef ENGINEERING_UNITS_UNIT_CONVERSION_HPP
#define ENGINEERING_UNITS_UNIT_CONVERSION_HPP

#include <cstdint>
#include <ratio>
#include <utility>
#include <type_traits>

#include <engineering_units/unit/traits.hpp>
#include <engineering_units/unit/mixed_unit.hpp>
#include <engineering_units/unit/multiply.hpp>
#include <engineering_units/unit/pow.hpp>
#include <engineering_units/unit/simplify.hpp>

#include <engineering_units/detail/fold_expressions.hpp>


namespace engunits
{

namespace detail
{

template<class ... Ts>
constexpr auto do_simplify( mixed_unit<Ts...> const & )
{
    return simplifies( conversion_factor_with_unit<>(),
                       conversion_factor_with_unit<Ts...>() );
}

template<class Lhs>
constexpr auto do_simplify( Lhs const & lhs )
{
    return simplifies( conversion_factor_with_unit<>(), lhs );
}

constexpr auto do_simplify( dimensionless )
{
    return conversion_factor_with_unit<>();
}

template<class Lhs, class Rhs>
constexpr auto conversion_factor_helper( Lhs const &,
                                         Rhs const & )
{
    return do_simplify( inverse(unit_traits<Lhs>::flat()) * 
                        unit_traits<Rhs>::flat() );
}

template<class Rhs>
constexpr auto conversion_factor_helper( dimensionless const &,
                                         Rhs const & )
{
    return do_simplify( unit_traits<Rhs>::flat() );
}


template<class Lhs>
constexpr auto conversion_factor_helper( Lhs const &,
                                         dimensionless const & )
{
    return do_simplify( unit_traits<Lhs>::flat() );
}
    
constexpr auto conversion_factor_helper( dimensionless const &,
                                         dimensionless const & )
{
    return conversion_factor_with_unit<>();
}

template<class T>
constexpr bool is_unit_or_dimensionless_v = 
    is_unit_v<T> || 
    std::is_same<T, dimensionless>::value;

}

template<class From, class To>
using is_convertible_t = typename
    std::is_same<
        decltype( 
            detail::conversion_factor_helper( 
                std::declval<To const &>(),
                std::declval<From const &>() )
        ),
        detail::conversion_factor_with_unit<>
    >::type;

template<class From, class To>
constexpr bool is_convertible_v = is_convertible_t<From, To>::value;
    
template<class From, class To>
constexpr auto is_convertible(From const &, To const &)
{
    return is_convertible_t<From, To>{};
}

template<class From, class To>
constexpr std::enable_if_t<
    detail::is_unit_or_dimensionless_v<From> && 
    detail::is_unit_or_dimensionless_v<To>,
    long double
> conversion_factor( const From & from,
                     const To & to )
{
    static_assert( is_convertible_v<From, To>,
                   " Can not convert <from> to <to> ");

    return detail::conversion_factor_helper( to, from ).factor();
}


}


#endif //ENGINEERING_UNITS_UNIT_CONVERSION_HPP
