/**
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef ENGINEERING_UNITS_UNIT_HELPER_MACROS_HPP
#define ENGINEERING_UNITS_UNIT_HELPER_MACROS_HPP

#include <ratio>

#include <engineering_units/unit/equality.hpp>
#include <engineering_units/unit/multiply.hpp>

#include <engineering_units/detail/string_literal.hpp>

#define ENGUNITS_DEFINE_ROOT_UNIT(name, symbol)                     \
    template<std::intmax_t Num, std::intmax_t Den = 1>              \
    struct name##_                                                  \
    {                                                               \
        typedef engunits::base_unit_tag unit_category;              \
        static constexpr auto symbol()                              \
        {                                                           \
            return engunits::detail::make_string_literal(#symbol);  \
        }                                                           \
    };                                                              \
    using name = name##_<1>


#define ENGUNITS_DEFINE_BASE_UNIT(name, symbol, parent, conv_factor) \
    template<std::intmax_t Num, std::intmax_t Den = 1>               \
    struct name##_                                                   \
    {                                                                \
        typedef engunits::base_unit_tag unit_category;               \
        static constexpr auto symbol()                               \
        {                                                            \
            return engunits::detail::make_string_literal(#symbol);   \
        }                                                            \
        typedef parent root_unit;                                    \
    };                                                               \
    using name = name##_<1>;                                         \
    constexpr long double custom_conversion( name const & from,      \
                                             parent const & to )     \
    {                                                                \
        return conv_factor;                                          \
    }                                                                \
    static_assert(true, "")

#define ENGUNITS_DEFINE_DERIVED_UNIT(name, symbol, ...)             \
    template<std::intmax_t Num, std::intmax_t Den = 1>              \
    struct name##_                                                  \
    {                                                               \
        typedef engunits::derived_unit_tag unit_category;           \
        static constexpr auto symbol()                              \
        {                                                           \
            return engunits::detail::make_string_literal(#symbol);  \
        }                                                           \
        static constexpr auto flat()                                \
        {                                                           \
            return engunits::mixed_unit< __VA_ARGS__ >{};           \
        }                                                           \
    };                                                              \
    using name = name##_<1> 

    
#define ENGUNITS_IMPORT_OPERATORS                       \
    using engunits::operator==;                         \
    using engunits::operator!=;                         \
    using engunits::operator*;                          \

#endif //ENGINEERING_UNITS_UNIT_HELPER_MACROS_HPP
