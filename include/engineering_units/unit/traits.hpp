/**
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef ENGINEERING_UNITS_UNIT_TRAITS_HPP
#define ENGINEERING_UNITS_UNIT_TRAITS_HPP

#include <ratio>
#include <type_traits>

namespace engunits
{

//! Tag for base units (i.e. meter, feet, seconds, etc.)
struct base_unit_tag {};

//! Tag for derived units (i.e. newton, meters per second, etc. )
struct derived_unit_tag {};

/**
 * @brief Query information about a unit
 */
template<class T>
struct unit_traits {};

// Specialization for base units and derived units.
template< std::intmax_t Num,
          std::intmax_t Den,
          template< std::intmax_t, std::intmax_t > class U >
struct unit_traits< U< Num, Den> >
{
    typedef U<Num, Den> unit;
    typedef typename unit::unit_category unit_category;
    
    typedef U<1,1> base;

    template< std::intmax_t N, std::intmax_t D = 1 >
    using base_ = U<N, D>;

    typedef std::ratio<Num, Den> exponent;
    
    // Convert derived units into mixed units.
    static constexpr unit flat( base_unit_tag ) { return unit{}; }
    
    static constexpr auto flat( derived_unit_tag ) 
    { 
        return unit::flat();
    }
    
    static constexpr auto flat() 
    {
        return flat( unit_category{} );
    }
};

/**
 * @brief Check if @p T is a unit
 * @note A @c unit is simply a class type with a member typedef @c unit_tag
 */    
template<class T, class = void>
struct is_unit : std::false_type {};

template<class T>
struct is_unit<T, decltype( typename unit_traits<T>::unit_category(), void() ) > :
    std::true_type {};
    
template<class T>
constexpr bool is_unit_v = is_unit<T>::value;

/**
 * @brief Check if two units have the same base
 * 
 * For instance m and m^2.
 */
template<class Lhs, class Rhs>
using is_same_base = typename std::is_same<
    typename unit_traits<Lhs>::base,
    typename unit_traits<Rhs>::base
>;

template<class Lhs, class Rhs>
constexpr bool is_same_base_v = is_same_base<Lhs, Rhs>::value;

/**
 * @brief Special type to signal dimensionless result
 */
struct dimensionless {};

template<class Lhs>
constexpr bool operator==(const Lhs &, const dimensionless & )
{
    return false;
}

template<class Lhs>
constexpr bool operator!=(const Lhs &, const dimensionless & )
{
    return true;
}

template<class Rhs>
constexpr bool operator==(const dimensionless &, const Rhs & )
{
    return false;
}

template<class Rhs>
constexpr bool operator!=(const dimensionless &, const Rhs & )
{
    return true;
}

constexpr bool operator==(const dimensionless &, const dimensionless & )
{
    return true;
}

constexpr bool operator!=(const dimensionless &, const dimensionless & )
{
    return false;
}

/**
 * @brief x * dimensionless = x
 */
template<class Lhs, 
         class = std::enable_if_t< is_unit_v<Lhs> >
         >
constexpr auto operator*( const Lhs & lhs, const dimensionless &)
{
    return lhs;
}

template<class Rhs, 
         class = std::enable_if_t< is_unit_v<Rhs> >
         >
constexpr auto operator*( const dimensionless &, const Rhs & rhs)
{
    return rhs;
}

constexpr auto operator*( const dimensionless &, const dimensionless &)
{
    return dimensionless{};
}

}


#endif //ENGINEERING_UNITS_UNIT_TRAITS_HPP
