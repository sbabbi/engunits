/**
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef ENGINEERING_UNITS_UNIT_MULTIPLY_HPP
#define ENGINEERING_UNITS_UNIT_MULTIPLY_HPP

#include <engineering_units/unit/mixed_unit.hpp>
#include <engineering_units/unit/traits.hpp>

#include <engineering_units/detail/fold_expressions.hpp>

namespace engunits
{

namespace detail
{
  
// Compute the result of multiplying two non-mixed_unit
// This can be:
//  1) A mixed_unit if the two units have different base
//  2) A non mixed-unit if the two units have the same base
//  3) A dimensionless unit if the two units have the same base and opposite exponents
template<class Lhs, class Rhs, class = void>
struct multiply_non_mixed_result
{
    static_assert( !( is_mixed_unit_v<Lhs> || is_mixed_unit_v<Rhs> ), "" );
    
    typedef mixed_unit<Lhs, Rhs> type;
};

template<class Lhs, 
         class Rhs >
struct multiply_non_mixed_result<
    Lhs,
    Rhs,
    std::enable_if_t< 
        is_same_base_v<Lhs, Rhs>
    >
>
{
    static_assert( !( is_mixed_unit_v<Lhs> || is_mixed_unit_v<Rhs> ), "" );

    using lhs_exp = typename unit_traits<Lhs>::exponent;
    using rhs_exp = typename unit_traits<Rhs>::exponent;
    
    template< std::intmax_t N, std::intmax_t D = 1 >
    using base_ = typename unit_traits<Lhs>::template base_<N, D>;

    using exp = std::ratio_add<lhs_exp, rhs_exp>;
    
    typedef std::conditional_t<
        std::ratio_equal< exp, std::ratio<0> >::value,
        dimensionless,
        base_<exp::num, exp::den> > type;
};

}

template<class Lhs, class Rhs>
constexpr typename std::enable_if_t<
    is_unit_v<Lhs> && 
    is_unit_v<Rhs> &&
    !detail::is_mixed_unit_v<Lhs> &&
    !detail::is_mixed_unit_v<Rhs>,

    typename detail::multiply_non_mixed_result< Lhs, Rhs >
>::type operator* (const Lhs &, const Rhs & )
{
    return {};
}

namespace detail
{

template<class ... Ts, class Lhs>
constexpr auto mixed_unit_mult_helper( const Lhs & lhs,
                                       const mixed_unit<Ts ... > & rhs,
                                       std::false_type /*lhs_in_rhs*/ )
{
    return join(lhs, rhs);
}

template<class ... Ts, class Rhs>
constexpr auto mixed_unit_mult_helper( const mixed_unit<Ts ... > & lhs,
                                       const Rhs & rhs,
                                       std::false_type /*rhs_in_lhs*/ )
{
    return join(lhs, rhs);
}

template<class Head, class ... Tail, class Lhs>
constexpr auto mixed_unit_mult_helper( const Lhs & lhs,
                                       const mixed_unit<Head, Tail ... > & rhs,
                                       std::true_type /*lhs_in_rhs*/,
                                       std::enable_if_t<
                                         is_same_base_v<Head, Lhs>,
                                         int
                                       > = 0 )
{
    return join( lhs * front(rhs), pop_front(rhs) );
}

template<class Head, class ... Tail, class Rhs>
constexpr auto mixed_unit_mult_helper( const mixed_unit<Head, Tail ... > & lhs,
                                       const Rhs & rhs,
                                       std::true_type /*rhs_in_lhs*/,
                                       std::enable_if_t<
                                         is_same_base_v<Head, Rhs>,
                                         int
                                       > = 0 )
{
    return join( rhs * front(lhs), pop_front(lhs) );
}

template<class Head, class ... Tail, class Lhs>
constexpr auto mixed_unit_mult_helper( const Lhs & lhs,
                                       const mixed_unit<Head, Tail ... > & rhs,
                                       std::true_type /*lhs_in_rhs*/,
                                       std::enable_if_t<
                                         !is_same_base_v<Head, Lhs>,
                                         int
                                       > = 0 )
{
    return join( front(rhs), lhs * pop_front(rhs) );
}

template<class Head, class ... Tail, class Rhs>
constexpr auto mixed_unit_mult_helper( const mixed_unit<Head, Tail ... > & lhs,
                                       const Rhs & rhs,
                                       std::true_type /*rhs_in_lhs*/,
                                       std::enable_if_t<
                                         !is_same_base_v<Head, Rhs>,
                                         int
                                       > = 0 )
{
    return join( front(lhs), pop_front(lhs) * rhs );
}


}

template<class ... Ts,
         class Rhs,
         class = std::enable_if_t< is_unit_v<Rhs> > >
constexpr auto operator*(const mixed_unit<Ts ... > & lhs,
                         const Rhs & rhs)
{
    using can_merge = std::integral_constant<
        bool,
        detail::any_of( is_same_base_v<Rhs, Ts> ... )>;

    return detail::mixed_unit_mult_helper( lhs, rhs, can_merge{} );
}

template<class Lhs,
         class ... Ts,
         class = std::enable_if_t< is_unit_v<Lhs> > >
constexpr auto operator*(const Lhs & lhs,
                         const mixed_unit< Ts ... > & rhs)
{
    using can_merge = std::integral_constant<
        bool,
        detail::any_of( is_same_base_v<Lhs, Ts> ... )>;

    return detail::mixed_unit_mult_helper( lhs, rhs, can_merge{} );
                                           
}

/**
 * @brief Multiply two @c mixed_unit
 */
template<class ... Lhs, class ... Rhs>
constexpr auto operator*(const mixed_unit<Lhs ... > & lhs,
                         const mixed_unit<Rhs ... > &)
{
    return detail::multiply( lhs, Rhs{} ... );
}

}

#endif //ENGINEERING_UNITS_UNIT_TRAITS_HPP
