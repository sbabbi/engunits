/*
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef ENGINEERING_UNITS_UNIT_MIXED_UNIT_HPP
#define ENGINEERING_UNITS_UNIT_MIXED_UNIT_HPP

#include <type_traits>

#include <engineering_units/unit/traits.hpp>
#include <engineering_units/unit/predicates.hpp>

#include <engineering_units/detail/fold_expressions.hpp>

namespace engunits
{

template<class ... Ts>
struct mixed_unit;

namespace detail
{

template<class T> 
struct is_mixed_unit : std::false_type {};

template<class ... Ts> 
struct is_mixed_unit< mixed_unit<Ts ... > > : std::true_type {};

template<class T>
constexpr bool is_mixed_unit_v = is_mixed_unit<T>::value;

}
    
/**
 * @brief A type that represents a list of base units.
 * 
 * No duplicates are allowed, so `mixed_unit< meter_<2>, meter >` is ill-formed.
 * 
 * @pre `is_unit<Ts>` is true for all @c Ts
 * @pre `sizeof ... (Ts) > 1`
 * @pre none of the @c Ts is a @c mixed_unit
 * @pre all the @c Ts have a different base
 * 
 * \code{.cpp}
 *  mixed_unit<>  // ill-formed
 *  mixed_unit< meter, meter_<2> > // ill-formed
 *  mixed_unit< meter, feet > // ok, not same base
 *  mixed_unit< second > // ill formed, simply use 'second'
 * \endcode
 */
template<class ... Ts>
struct mixed_unit
{
    static_assert( detail::all_of( is_unit_v<Ts> ... ),
                   "All elements of mixed_unit must be units" );
    
    static_assert( sizeof ... (Ts) != 0, "empty mixed_unit are not allowed");
    static_assert( sizeof ... (Ts) != 1, 
                   "mixed_unit with a single element are not allowed" );
    
    static_assert( detail::none_of( detail::is_mixed_unit_v<Ts> ... ),
                   "mixed_unit of mixed_unit are not allowed" );
    
    //TODO: static_assert Ts bases are all different

    static constexpr auto flat() 
    {
        return detail::multiply( unit_traits<Ts>::flat() ... );
    }
    
    static constexpr auto symbol()
    {
        return concatenate(' ', Ts::symbol() ... );
    }
};

namespace detail
{

template<std::intmax_t N, std::intmax_t D = 1>
struct pow_helper
{
    template<class U>
    struct apply
    {
        using result_exp = std::ratio_multiply<
            typename unit_traits<U>::exponent,
            std::ratio<N, D>
        >;

        typedef typename unit_traits<U>::template
            base_< result_exp::num, result_exp::den > type;
    };
    
    template<class U>
    using apply_t = typename apply<U>::type;
};

}

/**
 * @brief Specialize @c unit_traits for @c mixed_unit.
 * 
 * Every @c mixed_unit is interpreted as a unit with exponent equal to one.
 */
template< class ... Ts >
struct unit_traits< mixed_unit<Ts ... > >
{
    typedef mixed_unit<Ts ... > unit;
    
    typedef unit base;

    typedef std::ratio<1> exponent;

    typedef derived_unit_tag unit_category;

    template< std::intmax_t N, std::intmax_t D = 1 >
    using base_ = mixed_unit<
        typename detail::pow_helper<N,D>::template apply_t<Ts> ... 
    >;

    static constexpr auto flat() 
    {
        return unit::flat();
    }
    
    static constexpr auto symbol()
    {
        return unit::symbol();
    }
};

}

#endif //ENGINEERING_UNITS_UNIT_MIXED_UNIT_HPP
