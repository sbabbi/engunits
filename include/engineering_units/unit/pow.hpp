/*
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef ENGINEERING_UNITS_UNIT_POW_HPP
#define ENGINEERING_UNITS_UNIT_POW_HPP

#include <ratio>
#include <type_traits>

#include <engineering_units/unit/traits.hpp>
#include <engineering_units/unit/mixed_unit.hpp>

namespace engunits
{
    
namespace detail
{

template<class Base, class Exponent>
struct pow
{
    using result_exp = std::ratio_multiply<
        typename unit_traits<Base>::exponent,
        Exponent
    >;

    typedef typename unit_traits<Base>::template
        base_< result_exp::num, result_exp::den > type;
};

template<class Base, class Exponent>
using pow_t = typename pow<Base, Exponent>::type;

}
    
template<class Base, class Exponent>
constexpr auto pow( const Base &,
                    Exponent,
                    std::enable_if_t<
                        is_unit_v<Base>,
                        int
                    > = 0 )
{
    return detail::pow_t<Base, Exponent>{};
}

template<class T>
constexpr auto inverse( const T & x,
                        std::enable_if_t< is_unit_v<T>, int> = 0 )
{
    return pow( x, std::ratio<-1> {} );
}

}


#endif //ENGINEERING_UNITS_UNIT_POW_HPP
