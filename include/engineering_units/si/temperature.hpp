/*
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef ENGINEERING_UNITS_SI_TEMPERATURE_HPP
#define ENGINEERING_UNITS_SI_TEMPERATURE_HPP

#include <engineering_units/unit/helper_macros.hpp>
#include <engineering_units/quantity.hpp>

namespace engunits
{
namespace si
{

/**
 * @addtogroup predef_units
 * @{
 */

ENGUNITS_DEFINE_ROOT_UNIT( kelvin, K, temperature );
ENGUNITS_DEFINE_ROOT_UNIT( celsius, C, temperature_celsius );

namespace literals
{

ENGUNITS_DEFINE_UDL( kelvin, K )
ENGUNITS_DEFINE_UDL( celsius, C )

}

ENGUNITS_IMPORT_OPERATORS

/** @} */


struct abs_zero_t {};
constexpr abs_zero_t abs_zero{};

template<class T>
constexpr auto operator+(const quantity<T, si::kelvin> & lhs,
                         abs_zero_t )
{
    return quantity<T, si::celsius>( lhs.value() - 273.15L );
}

template<class T>
constexpr auto operator-(const quantity<T, si::celsius> & lhs,
                         abs_zero_t )
{
    return quantity<T, si::kelvin>( lhs.value() + 273.15L );
}



}

}

#endif //ENGINEERING_UNITS_SI_TEMPERATURE_HPP
