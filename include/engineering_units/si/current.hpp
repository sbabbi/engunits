/*
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef ENGINEERING_UNITS_SI_CURRENT_HPP
#define ENGINEERING_UNITS_SI_CURRENT_HPP

#include <engineering_units/unit/helper_macros.hpp>
#include <engineering_units/time.hpp>
#include <engineering_units/si/energy.hpp>

namespace engunits
{
namespace si
{

/**
 * @addtogroup predef_units
 * @{
 */

ENGUNITS_DEFINE_ROOT_UNIT( ampere, A, current );
ENGUNITS_DEFINE_BASE_UNIT( milliampere, mA, ampere, 0.001L );
ENGUNITS_DEFINE_BASE_UNIT( microampere, muA, milliampere, 0.001L );
ENGUNITS_DEFINE_BASE_UNIT( nanoampere, nA, microampere, 0.001L );
ENGUNITS_DEFINE_BASE_UNIT( picoampere, pA, nanoampere, 0.001L );
ENGUNITS_DEFINE_DERIVED_UNIT( coulomb, C, ampere, second );
ENGUNITS_DEFINE_DERIVED_UNIT( volt, V, joule, coulomb_<-1> );
ENGUNITS_DEFINE_DERIVED_UNIT( ohm, ohm, volt, ampere_<-1> );
ENGUNITS_DEFINE_DERIVED_UNIT( farad, F, ampere, second, volt_<-1> );
ENGUNITS_DEFINE_DERIVED_UNIT( millifarad, mF,   milliampere, second, volt_<-1> );
ENGUNITS_DEFINE_DERIVED_UNIT( microfarad, muF,  microampere, second, volt_<-1> );
ENGUNITS_DEFINE_DERIVED_UNIT( nanofarad,  nF,   nanoampere, second, volt_<-1> );
ENGUNITS_DEFINE_DERIVED_UNIT( picofarad,  pF,   picoampere, second, volt_<-1> );


ENGUNITS_IMPORT_OPERATORS

namespace literals
{

ENGUNITS_DEFINE_UDL( ampere, A )
ENGUNITS_DEFINE_UDL( volt, V )
ENGUNITS_DEFINE_UDL( ohm, ohm )
ENGUNITS_DEFINE_UDL( farad, F )
ENGUNITS_DEFINE_UDL( millifarad, mF )
ENGUNITS_DEFINE_UDL( microfarad, muF )
ENGUNITS_DEFINE_UDL( picofarad, pF )

}

/** @} */

}
}

#endif //ENGINEERING_UNITS_SI_CURRENT_HPP

